/* SPDX-License-Identifier: AGPL-3.0-or-later */
/* This file is part of yagips.

Â©2024 Alex Pensinger (ArcticLuma113)

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. */

syntax = "proto3";

package proto;

import "define.proto";

message QueryFilter {
    int32 type_id = 1;
    int32 area_mask = 2;
}

message QueryPathReq {
    OptionType query_type = 1;
    enum OptionType {
        OPTION_NONE = 0;
        OPTION_NORMAL = 1;
        OPTION_FIRST_CAN_GO = 2;
    }
    
    int32 query_id = 2;
    uint32 scene_id = 3;
    Vector source_pos = 4;
    repeated Vector destination_pos = 5;
    QueryFilter filter = 6;
    Vector3Int destination_extend = 7;
    Vector3Int source_extend = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2301;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message QueryPathRsp {
    int32 retcode = 1;
    int32 query_id = 2;
    
    PathStatusType query_status = 3;
    enum PathStatusType {
        STATUS_FAIL = 0;
        STATUS_SUCC = 1;
        STATUS_PARTIAL = 2;
    }
    
    repeated Vector corners = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2302;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ObstacleInfo {
    int32 obstacle_id = 1;
    
    ShapeType shape = 2;
    enum ShapeType {
        OBSTACLE_SHAPE_CAPSULE = 0;
        OBSTACLE_SHAPE_BOX = 1;
    }
    
    Vector center = 3;
    MathQuaternion rotation = 4;
    Vector3Int extents = 5;
}

message ObstacleModifyNotify {
    uint32 scene_id = 1;
    repeated ObstacleInfo add_obstacles = 2;
    repeated int32 remove_obstacle_ids = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2303;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PathfindingPingNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2304;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PathfindingEnterSceneReq {
    uint32 scene_id = 1;
    uint32 version = 2;
    repeated ObstacleInfo obstacles = 3;
    bool is_editor = 4;
    repeated uint32 activity_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2305;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PathfindingEnterSceneRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2306;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GMShowObstacleReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2351;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GMShowObstacleRsp {
    int32 retcode = 1;
    repeated ObstacleInfo obstacles = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2352;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GMShowNavMeshReq {
    Vector center = 1;
    Vector extent = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2353;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PBNavMeshPoly {
    repeated int32 vects = 1;
    
    repeated EdgeType edge_types = 2;
    enum EdgeType {
        INNER = 0;
        TILE_BOUND = 1;
        TILE_BOUND_UNCONNECT = 2;
    }
    
    int32 area = 3;
}

message PBNavMeshTile {
    repeated Vector vecs = 1;
    repeated PBNavMeshPoly polys = 2;
}

message GMShowNavMeshRsp {
    int32 retcode = 1;
    repeated PBNavMeshTile tiles = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2354;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PbNavMeshStatsInfo {
    int32 total_authority_ai = 1;
    int32 total_no_authority_ai = 2;
    int32 authority_ai_in_combat = 3;
    int32 no_authority_ai_in_combat = 4;
}

message NavMeshStatsNotify {
    repeated PbNavMeshStatsInfo infos = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2355;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}
