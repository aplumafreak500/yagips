/* SPDX-License-Identifier: AGPL-3.0-or-later */
/* This file is part of yagips.

Â©2024 Alex Pensinger (ArcticLuma113)

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. */

syntax = "proto3";

package proto;

import "define.proto";

message TowerTeam {
    uint32 tower_team_id = 1;
    repeated uint64 avatar_guid_list = 2;
}

message TowerLevelRecord {
    uint32 level_id = 1;
    repeated uint32 satisfied_cond_list = 2;
}

message TowerFloorRecord {
    uint32 floor_id = 1;
    map<uint32, uint32> passed_level_map = 2;
    uint32 floor_star_reward_progress = 3;
    repeated TowerLevelRecord passed_level_record_list = 4;
}

message TowerCurLevelRecord {
    uint32 cur_floor_id = 1;
    uint32 cur_level_index = 2;
    repeated TowerTeam tower_team_list = 3;
    repeated uint32 buff_id_list = 4;
    bool is_empty = 5;
}

message TowerBriefDataNotify {
    uint32 tower_schedule_id = 1;
    uint32 next_schedule_change_time = 2;
    uint32 total_star_num = 3;
    uint32 last_floor_index = 4;
    uint32 last_level_index = 5;
    bool is_finished_entrance_floor = 6;
    uint32 schedule_start_time = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2401;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerFloorRecordChangeNotify {
    repeated TowerFloorRecord tower_floor_record_list = 1;
    bool is_finished_entrance_floor = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2402;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerCurLevelRecordChangeNotify {
    TowerCurLevelRecord cur_level_record = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2403;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerDailyRewardProgressChangeNotify {
    uint32 daily_floor_id = 1;
    uint32 daily_level_index = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2404;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerTeamSelectReq {
    uint32 floor_id = 1;
    repeated TowerTeam tower_team_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2406;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TowerTeamSelectRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2407;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerAllDataReq {
    bool is_interact = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2408;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TowerMonthlyBrief {
    uint32 tower_schedule_id = 1;
    uint32 best_floor_index = 2;
    uint32 best_level_index = 3;
    uint32 total_star_count = 4;
}

message TowerAllDataRsp {
    uint32 tower_schedule_id = 1;
    repeated TowerFloorRecord tower_floor_record_list = 2;
    uint32 daily_floor_id = 3;
    uint32 daily_level_index = 4;
    TowerCurLevelRecord cur_level_record = 5;
    uint32 next_schedule_change_time = 6;
    map<uint32, uint32> floor_open_time_map = 7;
    bool is_first_interact = 8;
    TowerMonthlyBrief monthly_brief = 9;
    uint32 skip_to_floor_index = 10;
    uint32 commemorative_reward_id = 11;
    map<uint32, uint32> skip_floor_granted_reward_item_map = 12;
    uint32 valid_tower_record_num = 13;
    int32 retcode = 14;
    bool is_finished_entrance_floor = 15;
    uint32 schedule_start_time = 16;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2409;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerEnterLevelReq {
    uint32 enter_point_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2411;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TowerEnterLevelRsp {
    int32 retcode = 1;
    uint32 floor_id = 2;
    uint32 level_index = 3;
    repeated uint32 tower_buff_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2412;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerBuffSelectReq {
    uint32 tower_buff_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2413;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TowerBuffSelectRsp {
    int32 retcode = 1;
    uint32 tower_buff_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2414;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerSurrenderReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2421;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TowerSurrenderRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2422;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerGetFloorStarRewardReq {
    uint32 floor_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2423;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TowerGetFloorStarRewardRsp {
    int32 retcode = 1;
    uint32 floor_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2424;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerLevelEndNotify {
    bool is_success = 1;
    repeated uint32 finished_star_cond_list = 2;
    repeated ItemParam reward_item_list = 3;
    uint32 continue_state = 4;
    uint32 next_floor_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2430;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
    
    enum ContinueStateType {
        CONTINUE_STATE_CAN_NOT_CONTINUE = 0;
        CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL = 1;
        CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR = 2;
    }
}

message TowerLevelStarCondData {
    uint32 star_cond_index = 3;
    uint32 cond_value = 4;
    bool is_pause = 5;
}

message TowerLevelStarCondNotify {
    uint32 floor_id = 1;
    uint32 level_index = 2;
    repeated TowerLevelStarCondData cond_data_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2431;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerMiddleLevelChangeTeamNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2432;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TowerFightRecordPair {
    uint32 avatar_id = 1;
    uint32 data = 2;
}

message TowerMonthlyCombatRecord {
    repeated TowerFightRecordPair most_reveal_avatar_list = 1;
    TowerFightRecordPair most_kill_avatar_pair = 2;
    TowerFightRecordPair highest_dps_avatr_pair = 3;
    TowerFightRecordPair most_take_damage_avatar_pair = 4;
    TowerFightRecordPair most_cast_normal_skill_avatar_pair = 5;
    TowerFightRecordPair most_cast_energy_skill_avatar_pair = 6;
}

message TowerMonthlyDetail {
    TowerMonthlyBrief monthly_brief = 1;
    TowerMonthlyCombatRecord monthly_combat_record = 2;
}

message TowerRecordHandbookReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2433;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TowerRecordHandbookRsp {
    int32 retcode = 1;
    repeated TowerMonthlyDetail monthly_detail_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2434;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}
