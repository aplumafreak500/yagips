/* SPDX-License-Identifier: AGPL-3.0-or-later */
/* This file is part of yagips.

Â©2024 Alex Pensinger (ArcticLuma113)

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. */

syntax = "proto3";

package proto;

import "define.proto";

message GetGachaInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1501;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaUpInfo {
    uint32 item_parent_type = 1;
    repeated uint32 item_id_list = 2;
}

message GachaInfo {
    uint32 gacha_type = 1;
    uint32 schedule_id = 2;
    uint32 begin_time = 3;
    uint32 end_time = 4;
    uint32 cost_item_id = 5;
    uint32 cost_item_num = 6;
    string gacha_prefab_path = 7;
    string gacha_prob_url = 8;
    string gacha_record_url = 9;
    string gacha_preview_prefab_path = 10;
    uint32 ten_cost_item_id = 11;
    uint32 ten_cost_item_num = 12;
    uint32 left_gacha_times = 13;
    uint32 gacha_times_limit = 14;
    uint32 gacha_sort_id = 15;
    string gacha_prob_url_oversea = 16;
    string gacha_record_url_oversea = 17;
    repeated GachaUpInfo gacha_up_info_list = 18;
}

message GetGachaInfoRsp {
    int32 retcode = 1;
    repeated GachaInfo gacha_info_list = 2;
    uint32 gacha_random = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1502;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DoGachaReq {
    uint32 gacha_type = 1;
    uint32 gacha_times = 2;
    uint32 gacha_random = 3;
    uint32 gacha_schedule_id = 4;
    string gacha_tag = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1503;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaTransferItem {
    ItemParam item = 1;
    bool is_transfer_item_new = 2;
}

message GachaItem {
    ItemParam gacha_item = 1;
    repeated GachaTransferItem transfer_items = 2;
    bool is_flash_card = 3;
    bool is_gacha_item_new = 4;
    repeated ItemParam token_item_list = 5;
}

message DoGachaRsp {
    int32 retcode = 1;
    uint32 gacha_type = 2;
    uint32 gacha_times = 3;
    uint32 gacha_schedule_id = 4;
    repeated GachaItem gacha_item_list = 5;
    uint32 new_gacha_random = 6;
    uint32 cost_item_id = 7;
    uint32 cost_item_num = 8;
    uint32 ten_cost_item_id = 9;
    uint32 ten_cost_item_num = 10;
    uint32 left_gacha_times = 11;
    uint32 gacha_times_limit = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1504;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}
