/* SPDX-License-Identifier: AGPL-3.0-or-later */
/* This file is part of yagips.

Â©2024 Alex Pensinger (ArcticLuma113)

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. */

syntax = "proto3";

package proto;

import "define.proto";
import "fight.proto";

message AbilityInvokeEntryHead {
    uint32 instanced_ability_id = 1;
    uint32 instanced_modifier_id = 2;
    int32 local_id = 3;
    int32 modifier_config_local_id = 4;
    uint32 target_id = 5;
}

message AbilityInvokeEntry {
    AbilityInvokeEntryHead head = 1;
    AbilityInvokeArgument argument_type = 2;
    bytes ability_data = 3;
    uint32 entity_id = 4;
    ForwardType forward_type = 5;
    uint32 forward_peer = 6;
    uint32 event_id = 7;
}

message AbilityInvocationFixedNotify {
    AbilityInvokeEntry invoke1st = 1;
    AbilityInvokeEntry invoke2nd = 2;
    AbilityInvokeEntry invoke3rd = 3;
    AbilityInvokeEntry invoke4th = 4;
    AbilityInvokeEntry invoke5th = 5;
    AbilityInvokeEntry invoke6th = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1101;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AbilityInvocationsNotify {
    repeated AbilityInvokeEntry invokes = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1102;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AbilityMetaReInitOverrideMap {
    repeated AbilityScalarValueEntry override_map = 1;
}

message AbilityMetaAddAbility {
    AbilityAppliedAbility ability = 1;
}

message ModifierProperty {
    AbilityString key = 1;
    float value = 2;
}

message AbilityMetaModifierChange {
    ModifierAction action = 1;
    AbilityString parent_ability_name = 2;
    AbilityString parent_ability_override = 3;
    AbilityAttachedModifier attached_instanced_modifier = 4;
    repeated ModifierProperty properties = 5;
    int32 modifier_local_id = 6;
    bool is_mute_remote = 7;
    uint32 apply_entity_id = 8;
    bool is_attached_parent_ability = 9;
    uint32 server_buff_uid = 10;
}

message AbilityMetaSpecialFloatArgument {
    float argument_value = 1;
    bool is_on = 2;
}

message AbilityMetaAddOrGetAbilityAndTrigger {
    AbilityString ability_name = 1;
    AbilityString ability_override = 2;
    float trigger_argument = 3;
}

message AbilityMetaSetKilledState {
    bool killed = 1;
}

message AbilityMetaSetAbilityTrigger {
    uint32 trigger_ability_entity_id = 1;
}

message AbilityMetaSetModifierApplyEntityId {
    uint32 apply_entity_id = 1;
}

message AbilityMetaModifierDurabilityChange {
    float reduce_durability = 1;
    float remain_durability = 2;
}

message AbilityMetaElementReactionVisual {
    uint32 element_reaction_type = 1;
    uint32 element_source_type = 2;
    uint32 element_reactor_type = 3;
}

message AbilityActionTriggerAbility {
    uint32 other_id = 1;
}

message AbilityActionSetCrashDamage {
    float damage = 1;
    Vector hit_pos = 2;
}

message AbilityBornType {
    Vector pos = 1;
    Vector rot = 2;
    Vector move_dir = 3;
}

message AbilityActionSummon {
    Vector pos = 1;
    Vector rot = 2;
}

message AbilityActionBlink {
    Vector pos = 1;
    Vector rot = 2;
}

message AbilityActionCreateGadget {
    Vector pos = 1;
    Vector rot = 2;
    uint32 room_id = 3;
}

message AbilityActionSetRandomOverrideMapValue {
    float random_value = 1;
}

message AbilityApplyLevelModifier {
    uint32 apply_entity_id = 1;
}

message AbilityActionGenerateElemBall {
    Vector pos = 1;
    Vector rot = 2;
    uint32 room_id = 3;
}

message AbilityMixinEmpty {
    
}

message AbilityMixinAvatarSteerByCamera {
    Vector target_pos = 1;
    Vector target_dir = 2;
}

message AbilityMixinWindZone {
    repeated uint32 entity_ids = 1;
    repeated uint32 zone_id_list = 2;
}

message AbilityMixinCostStamina {
    bool is_swim = 1;
}

message AbilityMixinEliteShield {
    float sub_shield = 1;
}

message AbilityMixinElementShield {
    float sub_shield = 1;
    bool is_shield_broken = 2;
    float shield = 3;
    float max_shield = 4;
    uint32 absorb_type = 5;
}

message AbilityMixinGlobalShield {
    float sub_shield = 1;
    uint32 avatar_id = 2;
    string shield_effect_name = 3;
    float height_offset = 4;
    bool is_create_effect = 5;
}

message AbilityMixinShieldBar {
    uint32 element_type = 1;
    float shield = 2;
    float max_shield = 3;
}

message AbilityMixinWindSeedSpawner {
    oneof cmd {
        AddSignal add_signal = 1;
        RefreshSeed refresh_seed = 2;
        CatchSeed catch_seed = 3;
    }
    
    message AddSignal {
        
    }
    
    message RefreshSeed {
        repeated Vector pos_list = 1;
    }
    
    message CatchSeed {
        uint32 entity_id = 1;
    }
}

message AbilityMixinDoActionByElementReaction {
    uint32 target_entity_id = 1;
}

message AbilityMixinFieldEntityCountChange {
    uint32 field_entity_count = 1;
}

message ClientAbilityInitBeginNotify {
    uint32 entity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1103;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ClientAbilityInitFinishNotify {
    uint32 entity_id = 1;
    repeated AbilityInvokeEntry invokes = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1104;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AbilityInvocationFailNotify {
    uint32 entity_id = 1;
    AbilityInvokeEntry invoke = 2;
    string reason = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1105;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EntityAbilityInvokeEntry {
    uint32 entity_id = 1;
    repeated AbilityInvokeEntry invokes = 2;
}

message ClientAbilitiesInitFinishCombineNotify {
    repeated EntityAbilityInvokeEntry entity_invoke_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WindSeedClientNotify {
    oneof notify {
        RefreshNotify refresh_notify = 1;
        AddWindBulletNotify add_wind_bullet_notify = 2;
        AreaNotify area_notify = 3;
    }
    
    message RefreshNotify {
        uint32 refresh_num = 1;
    }
    
    message AddWindBulletNotify {
        uint32 seed_entity_id = 1;
        Vector seed_pos = 2;
        uint32 catch_player_uid = 3;
    }
    
    message AreaNotify {
        uint32 area_id = 1;
        bytes area_code = 2;
        uint32 area_type = 3;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1110;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AbilityChangeNotify {
    uint32 entity_id = 1;
    AbilityControlBlock ability_control_block = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1111;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientAbilityChangeNotify {
    uint32 entity_id = 1;
    repeated AbilityInvokeEntry invokes = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1112;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ServerUpdateGlobalValueNotify {
    uint32 entity_id = 1;
    uint32 key_hash = 2;
    
    UpdateType update_type = 3;
    enum UpdateType {
        INVALUE = 0;
        ADD = 1;
    }
    
    float delta = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1113;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerGlobalValueChangeNotify {
    uint32 entity_id = 1;
    uint32 key_hash = 2;
    float value = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1114;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

enum AbilityInvokeArgument {
    ABILITY_NONE = 0;
    ABILITY_META_MODIFIER_CHANGE = 1;
    ABILITY_META_COMMAND_MODIFIER_CHANGE_REQUEST = 2;
    ABILITY_META_SPECIAL_FLOAT_ARGUMENT = 3;
    ABILITY_META_OVERRIDE_PARAM = 4;
    ABILITY_META_CLEAR_OVERRIDE_PARAM = 5;
    ABILITY_META_REINIT_OVERRIDEMAP = 6;
    ABILITY_META_GLOBAL_FLOAT_VALUE = 7;
    ABILITY_META_CLEAR_GLOBAL_FLOAT_VALUE = 8;
    ABILITY_META_ABILITY_ELEMENT_STRENGTH = 9;
    ABILITY_META_ADD_OR_GET_ABILITY_AND_TRIGGER = 10;
    ABILITY_META_SET_KILLED_SETATE = 11;
    ABILITY_META_SET_ABILITY_TRIGGER = 12;
    ABILITY_META_ADD_NEW_ABILITY = 13;
    ABILITY_META_REMOVE_ABILITY = 14;
    ABILITY_META_SET_MODIFIER_APPLY_ENTITY = 15;
    ABILITY_META_MODIFIER_DURABILITY_CHANGE = 16;
    ABILITY_META_ELEMENT_REACTION_VISUAL = 17;
    ABILITY_ACTION_TRIGGER_ABILITY = 50;
    ABILITY_ACTION_SET_CRASH_DAMAGE = 51;
    ABILITY_ACTION_EFFECT = 52;
    ABILITY_ACTION_SUMMON = 53;
    ABILITY_ACTION_BLINK = 54;
    ABILITY_ACTION_CREATE_GADGET = 55;
    ABILITY_ACTION_APPLY_LEVEL_MODIFIER = 56;
    ABILITY_ACTION_GENERATE_ELEM_BALL = 57;
    ABILITY_ACTION_SET_RANDOM_OVERRIDE_MAP_VALUE = 58;
    ABILITY_MIXIN_AVATAR_STEER_BY_CAMERA = 100;
    ABILITY_MIXIN_MONSTER_DEFEND = 101;
    ABILITY_MIXIN_WIND_ZONE = 102;
    ABILITY_MIXIN_COST_STAMINA = 103;
    ABILITY_MIXIN_ELITE_SHIELD = 104;
    ABILITY_MIXIN_ELEMENT_SHIELD = 105;
    ABILITY_MIXIN_GLOBAL_SHIELD = 106;
    ABILITY_MIXIN_SHIELD_BAR = 107;
    ABILITY_MIXIN_WIND_SEED_SPAWNER = 108;
    ABILITY_MIXIN_DO_ACTION_BY_ELEMENT_REACTION = 109;
    ABILITY_MIXIN_FIELD_ENTITY_COUNT_CHANGE = 110;
}

enum ModifierAction {
    ADDED = 0;
    REMOVED = 1;
}
